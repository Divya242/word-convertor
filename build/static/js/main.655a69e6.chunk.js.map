{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/AboutApp.js","component/React Practise/CheckboxPractise/Checkbox.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","for","togglebuttonColorMode","TextForm","useState","text","setText","buttonColorMode","buttonColor","style","color","heading","value","rows","onChange","e","target","placeholder","newText","toUpperCase","showAlertMessage","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","captialize","msg","AboutApp","backgroundColor","mystyle","setstyle","settext","aria-labelledby","data-bs-parent","border","defaultProps","Checkbox","VeryGood","Good","NotGood","colorname","setcolor","checkedSelected","persist","name","checked","colorMode","result","Object","keys","filter","x","width","height","textAlign","App","setMode","setAlert","setButtonColor","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qMAKe,SAASA,EAAOC,GAC7B,OACE,8BACA,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACF,sBAAKD,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SAAuCH,EAAMI,QAC7C,wBAAQH,UAAU,iBAAiBI,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,oBAA5L,SACE,sBAAMT,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BU,GAAG,yBAA7C,UACE,qBAAIV,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,kBAAkBW,eAAa,OAAOT,GAAG,IAAzD,oBAEF,oBAAIF,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,WAAWE,GAAG,SAA9B,wBAOJ,sBAAKF,UAAS,2CAAqD,UAAfD,EAAME,KAAmB,OAAS,SAAtF,UACJ,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWQ,QAAUb,EAAMc,WAAYC,KAAK,SAASJ,GAAG,2BACjG,uBAAOV,UAAU,mBAAmBe,IAAI,yBAAxC,iCAEF,sBAAKf,UAAS,sCAAgD,UAAfD,EAAME,KAAmB,OAAS,SAAjF,UACE,uBAAOD,UAAU,mBAAmBI,KAAK,WAAWQ,QAAUb,EAAMiB,sBAAuBF,KAAK,SAASJ,GAAG,2BAC5G,uBAAOV,UAAU,mBAAmBe,IAAI,yBAAxC,sCC/Ba,SAASE,EAASlB,GAAQ,IAAD,EAEfmB,mBAAS,IAFM,mBAE/BC,EAF+B,KAE1BC,EAF0B,KA+BhCC,EAAwC,YAAtBtB,EAAMuB,YAA2B,UAAY,UACrE,OACE,sBAAKtB,UAAU,YAAYuB,MAAO,CAACC,MAAsB,SAAfzB,EAAME,KAAkB,QAAU,WAA5E,UACE,6BAAKF,EAAM0B,UACX,qBAAKzB,UAAU,OAAf,SACE,0BAAUA,UAAS,mCAA8BD,EAAME,KAApC,iBAAgE,UAAfF,EAAME,KAAmB,OAAS,SAAWyB,MAAOP,EAAMT,GAAG,QAAQiB,KAAK,IAAIC,SA1BjI,SAACC,GACtBT,EAAQS,EAAEC,OAAOJ,QAyB+JK,YAAY,0BAE1L,wBAAQ/B,UAAS,kBAAaqB,EAAb,SAAqCT,QAjCjC,WACvB,IAAMoB,EAAUb,EAAKc,cACrBb,EAAQY,GACRjC,EAAMmC,iBAAiB,0BAA2B,SA8BhD,kCACA,wBAAQlC,UAAS,kBAAaqB,EAAb,SAAqCT,QA1BjC,WACvB,IAAMoB,EAAUb,EAAKgB,cACrBf,EAAQY,GACRjC,EAAMmC,iBAAiB,0BAA2B,SAuBhD,mCACA,wBAAQlC,UAAS,kBAAaqB,EAAb,SAAqCT,QAtBnC,WACrBQ,EAAQ,KAqBN,wBACA,wBAAQpB,UAAS,kBAAaqB,EAAb,SAAqCT,QApBvC,WACjB,IAAIO,EAAOiB,SAASC,eAAe,SACnClB,EAAKmB,SACLC,UAAUC,UAAUC,UAAUtB,EAAKO,QAiBjC,wBACA,wBAAQ1B,UAAS,kBAAaqB,EAAb,SAAqCT,QAfjC,WACxB,IAAIoB,EAAUb,EAAKuB,MAAM,QACzBtB,EAAQY,EAAQW,KAAK,OAalB,iCACA,sBAAK3C,UAAW,gBAAgBuB,MAAO,CAACC,MAAsB,SAAfzB,EAAME,KAAkB,QAAU,WAAjF,UACA,oBAAID,UAAU,OAAd,6CACA,8BAAoB,IAAhBmB,EAAKyB,OAAgB,EAAIzB,GAAQA,EAAKuB,MAAM,KAAKE,OAArD,cAAwEzB,EAAKyB,OAA7E,iBACA,oBAAI5C,UAAU,OAAd,qBACA,4BAAImB,EAAKyB,OAAQ,EAAIzB,EAAO,kEC/CnB,SAAS0B,EAAM9C,GAM5B,OACEA,EAAM+C,OAAS,8BACb,sBAAK9C,UAAS,sBAAiBD,EAAM+C,MAAM1C,KAA7B,gCAAiEU,KAAK,QAApF,UACJ,mCAPmB,SAACiC,GAClB,IAAMC,EAAQD,EAAKZ,cACnB,OAAOa,EAAMC,OAAO,GAAGhB,cAAgBe,EAAME,MAAM,GAK5CC,CAAWpD,EAAM+C,MAAM1C,MAAhC,QADI,IAC+CL,EAAM+C,MAAMM,SCTlD,SAASC,IAAY,IAAD,EACNnC,mBAAS,CAClCM,MAAM,QACN8B,gBAAgB,UAHe,mBAC3BC,EAD2B,KAClBC,EADkB,OAKXtC,mBAAS,oBALE,mBAK5BC,EAL4B,KAKtBsC,EALsB,KAyBjC,OACE,sBAAKzD,UAAU,YAAYuB,MAAOgC,EAAlC,UACI,yDACA,sBAAKvD,UAAU,YAAYU,GAAG,mBAA9B,UACE,sBAAKV,UAAU,iBAAiBuB,MAAOgC,EAAvC,UACE,oBAAIvD,UAAU,mBAAmBU,GAAG,aAApC,SACE,wBAAQV,UAAU,mBAAmBI,KAAK,SAASmB,MAAOgC,EAASlD,iBAAe,WAAWC,iBAAe,eAAeE,gBAAc,OAAOD,gBAAc,cAA9J,kDAIF,qBAAKG,GAAG,cAAcV,UAAU,mCAAmC0D,kBAAgB,aAAaC,iBAAe,oBAA/G,SACE,sBAAK3D,UAAU,iBAAf,UACE,0FADF,8FAKJ,sBAAKA,UAAU,iBAAiBuB,MAAOgC,EAAvC,UACE,oBAAIvD,UAAU,mBAAmBU,GAAG,aAApC,SACE,wBAAQV,UAAU,6BAA6BI,KAAK,SAASmB,MAAOgC,EAASlD,iBAAe,WAAWC,iBAAe,eAAeE,gBAAc,QAAQD,gBAAc,cAAzK,kDAIF,qBAAKG,GAAG,cAAcV,UAAU,8BAA8B0D,kBAAgB,aAAaC,iBAAe,oBAA1G,SACE,sBAAK3D,UAAU,iBAAf,UACA,gGADA,4FAKJ,sBAAKA,UAAU,iBAAiBuB,MAAOgC,EAAvC,UACE,oBAAIvD,UAAU,mBAAmBU,GAAG,eAApC,SACE,wBAAQV,UAAU,6BAA6BI,KAAK,SAASmB,MAAOgC,EAASlD,iBAAe,WAAWC,iBAAe,iBAAiBE,gBAAc,QAAQD,gBAAc,gBAA3K,0DAIF,qBAAKG,GAAG,gBAAgBV,UAAU,8BAA8B0D,kBAAgB,eAAeC,iBAAe,oBAA9G,SACE,sBAAK3D,UAAU,iBAAf,UACA,oGADA,mGAMH,wBAAQA,UAAU,uBAAuBY,QA3D3B,WACA,UAAlB2C,EAAQ/B,OACTgC,EAAS,CACPhC,MAAM,QACN8B,gBAAgB,QAChBM,OAAQ,oBAEVH,EAAQ,sBAIRD,EAAS,CACPhC,MAAM,QACN8B,gBAAgB,UAElBG,EAAQ,uBA4CH,SAAmEtC,OHtB9ErB,EAAO+D,aAAe,CACpB1D,MAAM,kB,4BI7CO,SAAS2D,EAAS/D,GAAQ,IAAD,EACRmB,mBAAS,CACrC6C,UAAU,EACVC,MAAK,EACLC,SAAQ,IAJ4B,mBAC/BC,EAD+B,KACpBC,EADoB,KAOhCC,EAAkB,SAACvC,GACvBA,EAAEwC,UACFF,EAAS,2BAAID,GAAL,kBAAiBrC,EAAEC,OAAOwC,KAAMzC,EAAEC,OAAOyC,YAG7CC,EAA2B,SAAfzE,EAAME,KAAkB,QAAU,UAE9CwE,EAAWC,OAAOC,KAAKT,GAAWU,QAAO,SAACC,GAAD,OAAKX,EAAUW,MAC9D,OACE,sBAAK7E,UAAU,YAAYuB,MAAO,CAACC,MAAOgD,GAA1C,UACE,gFAEA,uBAAOpE,KAAK,WAAWkE,KAAK,WAAW5C,MAAM,WAAW1B,UAAU,OAAO4B,SAAUwC,EAAiBG,QAASL,EAAUH,WAHzH,WAIE,uBAAO3D,KAAK,WAAWkE,KAAK,OAAO5C,MAAM,OAAO1B,UAAU,OAAO4B,SAAUwC,EAAiBG,QAASL,EAAUF,OAJjH,OAKE,uBAAO5D,KAAK,WAAWkE,KAAK,UAAU5C,MAAM,UAAU1B,UAAU,OAAO4B,SAAUwC,EAAiBG,QAASL,EAAUD,UALvH,UAOE,qBAAKjE,UAAU,OAAOuB,MAAO,CAACC,MAAO,QAASsD,MAAM,QAAQxB,gBAAiB,QAAQyB,OAAO,OAAQC,UAAU,UAA9G,SACC,iCAASP,EAAQ,Y,WCXT,SAASQ,IAAO,IAAD,EACJ/D,mBAAS,SADL,mBACrBjB,EADqB,KACfiF,EADe,OAEHhE,mBAAS,MAFN,mBAErB4B,EAFqB,KAEfqC,EAFe,OAGUjE,mBAAS,WAHnB,mBAGrBI,EAHqB,KAGR8D,EAHQ,KAMtBlD,EAAmB,SAACmD,EAASjF,GACjC+E,EAAS,CACR/B,IAAKiC,EACLjF,KAAOA,IAERkF,sBAAW,WACTH,EAAS,QACT,OA+BJ,OACE,cAAC,IAAD,UACA,8BACE,sBAAKnF,UAAU,MAAf,UACE,cAACF,EAAD,CAAQK,MAAM,iBAAiBF,KAAMA,EAAMqB,YAAaA,EAAaT,WA/BxD,WACL,UAATZ,GACDiF,EAAQ,QACR9C,SAASmD,KAAKhE,MAAM+B,gBAAkB,UACtCpB,EAAiB,4BAA4B,WAC7CE,SAASjC,MAAQ,0BAGjB+E,EAAQ,SACR9C,SAASmD,KAAKhE,MAAM+B,gBAAkB,QACtCpB,EAAiB,6BAA6B,WAC9CE,SAASjC,MAAQ,2BAoBgFa,sBAhBvE,WACT,YAAhBM,GACD8D,EAAe,WACfhD,SAASmD,KAAKhE,MAAM+B,gBAAkB,YAGtC8B,EAAe,WACfF,EAAQ,QACR9C,SAASmD,KAAKhE,MAAM+B,gBAAkB,cASpC,cAACT,EAAD,CAAOC,MAAOA,IACd,qBAAK9C,UAAU,iBAAf,SAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwF,OAAK,EAACC,KAAK,SAAlB,SACE,cAACpC,EAAD,MAGF,eAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAlB,UACA,cAACxE,EAAD,CAAUQ,QAAQ,4BAA4BxB,KAAMA,EAAMiC,iBAAkBA,EAAkBZ,YAAaA,IAC7G,cAACwC,EAAD,CAAU7D,KAAMA,mBC1ExB,IAYeyF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpB,EAAD,MAEF7C,SAASC,eAAe,SAM1BqD,M","file":"static/js/main.655a69e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`px-2 form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick= {props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n<div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick= {props.togglebuttonColorMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Color Theme</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title:\"Set title here\"\r\n}\r\n","import React , {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const [text,setText] = useState(\"\");\r\n\r\n\r\n  const handleUpperClick = () => {\r\n    const newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlertMessage(\"Convert into Upper Case\", \"info\")\r\n  }\r\n  const handleTextArea = (e) => {\r\n    setText(e.target.value);\r\n  }\r\n  const handleLowerClick = () => {\r\n    const newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlertMessage(\"Convert into Lower Case\", \"info\")\r\n  }\r\n  const handleClearAll = () => {\r\n    setText(\"\");\r\n  }\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n  }\r\n\r\n  const handleExtraSpace = () => {\r\n   let newText = text.split(/[ ]+/);\r\n   setText(newText.join(\" \"));\r\n  }\r\n  const buttonColorMode = props.buttonColor === \"primary\"? \"success\" : \"primary\";\r\n  return (\r\n    <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : '#042743'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className={`form-control p-3 mb-2 bg-${props.mode} text-${props.mode === 'light' ? 'dark' : 'light'}`} value={text} id=\"myBox\" rows=\"8\" onChange={handleTextArea} placeholder=\"Enter the text here\"></textarea>\r\n      </div>\r\n      <button className={`btn btn-${buttonColorMode} mx-2`} onClick={handleUpperClick}>Convert to UpperCase</button>\r\n      <button className={`btn btn-${buttonColorMode} mx-2`} onClick={handleLowerClick}> Convert to LowerCase</button>\r\n      <button className={`btn btn-${buttonColorMode} mx-2`} onClick={handleClearAll}> Clear All</button>\r\n      <button className={`btn btn-${buttonColorMode} mx-2`} onClick={handleCopy}> Copy Text</button>\r\n      <button className={`btn btn-${buttonColorMode} mx-2`} onClick={handleExtraSpace}> Remove Extra Space</button>\r\n      <div className =\"containerinfo\" style={{color: props.mode === 'dark' ? 'white' : '#042743'}}>\r\n      <h2 className=\"my-3\">How many words and  characters?</h2>\r\n      <p>{text.length === 0 ?  0 : text && text.split(\" \").length} Words And {text.length} Characters</p>\r\n      <h2 className=\"my-3\">Preview</h2>\r\n      <p>{text.length> 0 ? text : \"Enter something in the textbox above to preview it here\" }</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n  const captialize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && <div>\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{captialize(props.alert.type)}:-</strong> {props.alert.msg}\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n","import React , {useState} from 'react'\r\n\r\nexport default function AboutApp() {\r\n  const[mystyle, setstyle] = useState({\r\n    color:\"black\",\r\n    backgroundColor:\"white\"\r\n  });\r\nconst [text, settext] = useState(\"Enable Dark Mode\");\r\n\r\n  const toggleTextMode = () => {\r\n    if(mystyle.color === \"black\") {\r\n      setstyle({\r\n        color:\"white\",\r\n        backgroundColor:\"black\",\r\n        border: \"1px solid white\"\r\n      });\r\n      settext(\"Enable Dark Mode\");\r\n\r\n    }\r\n    else {\r\n      setstyle({\r\n        color:\"black\",\r\n        backgroundColor:\"white\",\r\n      });\r\n      settext(\"Enable Light Mode\");\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"container\" style={mystyle}>\r\n        <h1>About Word Coverter App</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button className=\"accordion-button\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Word Convert to Upper Case Utility\r\n              </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n                <strong>If you want to convert word from lower to Upper case</strong> Click on Upper Case CTA and you can visible the text area data in Captial letters.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n              Word Convert to Lower Case Utility\r\n              </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n              <strong>If you want to convert word from  Upper case to lower case</strong> Click on Lower Case CTA and you can visible the text area data in small letters.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\" style={mystyle}>\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button className=\"accordion-button collapsed\" type=\"button\" style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n              How many words and characters in textarea!\r\n              </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n              <div className=\"accordion-body\">\r\n              <strong>If you want to see , how many words or characters in your text</strong> There is one section for that, where can show the counting for words and characters.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n           <button className=\"btn btn-primary my-3\" onClick={toggleTextMode}>{text}</button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Checkbox(props) {\r\n  const [colorname, setcolor] = useState({\r\n    VeryGood: false,\r\n    Good:false,\r\n    NotGood:false\r\n  });\r\n\r\n  const checkedSelected = (e) => {\r\n    e.persist();\r\n    setcolor({...colorname, [e.target.name]:e.target.checked})\r\n  }\r\n\r\n  const colorMode = props.mode === 'dark' ? 'white' : '#042743';\r\n\r\n  const result  =  Object.keys(colorname).filter((x)=>colorname[x]);\r\n  return (\r\n    <div className=\"container\" style={{color: colorMode}}>\r\n      <h4>Kindly share experience in Word Translator App</h4>\r\n\r\n      <input type=\"checkbox\" name=\"VeryGood\" value=\"VeryGood\" className=\"mx-2\" onChange={checkedSelected} checked={colorname.VeryGood}/>VeryGood\r\n      <input type=\"checkbox\" name=\"Good\" value=\"Good\" className=\"mx-2\" onChange={checkedSelected} checked={colorname.Good}/>Good\r\n      <input type=\"checkbox\" name=\"NotGood\" value=\"NotGood\" className=\"mx-2\" onChange={checkedSelected} checked={colorname.NotGood}/>NotGood\r\n\r\n      <div className=\"py-2\" style={{color: \"white\" ,width:\"250px\",backgroundColor: \"black\",height:\"40px\", textAlign:\"center\"}}>\r\n       <strong>{result+ \"  \"}</strong>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React,{useState} from 'react'\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport AboutApp from './components/AboutApp';\nimport { setTimeout } from 'timers';\nimport Checkbox from './component/React Practise/CheckboxPractise/Checkbox';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n// import About from '../src/component/NavBar/About';\n// import Skill from '../src/component/NavBar/Skill';\n\nexport default function App() {\n  const [mode, setMode] = useState('light');\n  const [alert,setAlert] = useState(null);\n  const [buttonColor, setButtonColor] = useState('primary');\n\n\n  const showAlertMessage = (message, type) => {\n    setAlert({\n     msg: message,\n     type : type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n  }\n\n\n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      showAlertMessage(\"Dark mode has been enable\",\"success\");\n      document.title = \"TextUtils - Dark Mode\"\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlertMessage(\"Light mode has been enable\",\"success\");\n      document.title = \"TextUtils - Light Mode\"\n    }\n  }\n\n  const togglebuttonColorMode = () => {\n    if(buttonColor === \"primary\") {\n      setButtonColor(\"success\");\n      document.body.style.backgroundColor = \"#6c757d\"\n    }\n    else {\n      setButtonColor(\"primary\");\n      setMode('dark');\n      document.body.style.backgroundColor = \"#8dbe00\";\n    }\n  }\n\n  return (\n    <Router>\n    <div>\n      <div className=\"App\">\n        <Navbar title=\"Word Converter\" mode={mode} buttonColor={buttonColor} toggleMode = {toggleMode} togglebuttonColorMode={togglebuttonColorMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n\n        <Switch>\n          <Route exact path=\"/about\">\n            <AboutApp />\n          </Route>\n\n          <Route exact path=\"/\">\n          <TextForm heading=\"Enter the Text to Anaylse\" mode={mode} showAlertMessage={showAlertMessage} buttonColor={buttonColor}/>\n        <Checkbox mode={mode}/>\n          </Route>\n        </Switch>\n\n\n\n        </div>\n       {/* Portfolio Info\n       <About/>\n       <Skill/> */}\n     </div>\n    </div>\n    </Router>\n  )\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}